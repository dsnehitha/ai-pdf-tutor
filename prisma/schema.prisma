generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  documents Document[]
  chats     Chat[]
  createdAt DateTime @default(now())
}

model Document {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  filename  String
  url       String
  chunks    Chunk[]
  chats     Chat[]
  metadata  String?  // Store PDF metadata like page count, dimensions
  createdAt DateTime @default(now())
  
  @@index([userId])
}

model Chunk {
  id         String   @id @default(cuid())
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  content    String
  pageNumber Int
  embedding  String   // Store as JSON string for SQLite
  metadata   String?  // Store chunk position, coordinates as JSON
  createdAt  DateTime @default(now())
  
  @@index([documentId])
}

model Chat {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentId String
  document   Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  title      String?
  messages   Message[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  @@index([userId])
  @@index([documentId])
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  role      String   // 'user' or 'assistant'
  content   String
  metadata  String?  // Store tool invocations, annotations
  createdAt DateTime @default(now())
  
  @@index([chatId])
}